package net.zlt.create_vibrant_vaults.block;

import com.simibubi.create.foundation.data.AssetLookup;
import com.simibubi.create.foundation.data.SharedProperties;
import com.tterrag.registrate.util.entry.BlockEntry;
import io.github.fabricators_of_create.porting_lib.models.generators.ConfiguredModel;
import net.minecraft.core.Direction;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.material.MapColor;
import net.zlt.create_vibrant_vaults.CreateVibrantVaults;
import net.zlt.create_vibrant_vaults.block.basic_shipping_container.*;
import net.zlt.create_vibrant_vaults.block.basic_shipping_container.vertical.*;
import net.zlt.create_vibrant_vaults.block.item_vault.*;
import net.zlt.create_vibrant_vaults.block.item_vault.vertical.*;
import net.zlt.create_vibrant_vaults.block.shipping_container.*;
import net.zlt.create_vibrant_vaults.block.shipping_container.vertical.*;
import net.zlt.create_vibrant_vaults.ct.basic_shipping_container.*;
import net.zlt.create_vibrant_vaults.ct.basic_shipping_container.vertical.*;
import net.zlt.create_vibrant_vaults.ct.item_vault.*;
import net.zlt.create_vibrant_vaults.ct.item_vault.vertical.*;
import net.zlt.create_vibrant_vaults.ct.shipping_container.*;
import net.zlt.create_vibrant_vaults.ct.shipping_container.vertical.*;
import net.zlt.create_vibrant_vaults.item.AllCreativeModeTabs;
import net.zlt.create_vibrant_vaults.item.basic_shipping_container.*;
import net.zlt.create_vibrant_vaults.item.basic_shipping_container.vertical.*;
import net.zlt.create_vibrant_vaults.item.item_vault.*;
import net.zlt.create_vibrant_vaults.item.item_vault.vertical.*;
import net.zlt.create_vibrant_vaults.item.shipping_container.*;
import net.zlt.create_vibrant_vaults.item.shipping_container.vertical.*;

import static com.simibubi.create.foundation.data.CreateRegistrate.connectedTextures;
import static com.simibubi.create.foundation.data.TagGen.pickaxeOnly;

public class AllBlocks {
    public static final BlockEntry<BlackItemVaultBlock> BLACK_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("black_item_vault", BlackItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BLACK)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(BlackItemVaultCTBehaviour::new))
        .item(BlackItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BlueItemVaultBlock> BLUE_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("blue_item_vault", BlueItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(BlueItemVaultCTBehaviour::new))
        .item(BlueItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BrownItemVaultBlock> BROWN_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("brown_item_vault", BrownItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BROWN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(BrownItemVaultCTBehaviour::new))
        .item(BrownItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<CyanItemVaultBlock> CYAN_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("cyan_item_vault", CyanItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.CYAN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(CyanItemVaultCTBehaviour::new))
        .item(CyanItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<GrayItemVaultBlock> GRAY_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("gray_item_vault", GrayItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.GRAY)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(GrayItemVaultCTBehaviour::new))
        .item(GrayItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<GreenItemVaultBlock> GREEN_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("green_item_vault", GreenItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.GREEN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(GreenItemVaultCTBehaviour::new))
        .item(GreenItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LightBlueItemVaultBlock> LIGHT_BLUE_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("light_blue_item_vault", LightBlueItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIGHT_BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(LightBlueItemVaultCTBehaviour::new))
        .item(LightBlueItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LightGrayItemVaultBlock> LIGHT_GRAY_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("light_gray_item_vault", LightGrayItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIGHT_GRAY)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(LightGrayItemVaultCTBehaviour::new))
        .item(LightGrayItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LimeItemVaultBlock> LIME_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("lime_item_vault", LimeItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIME)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(LimeItemVaultCTBehaviour::new))
        .item(LimeItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<MagentaItemVaultBlock> MAGENTA_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("magenta_item_vault", MagentaItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.MAGENTA)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(MagentaItemVaultCTBehaviour::new))
        .item(MagentaItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<OrangeItemVaultBlock> ORANGE_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("orange_item_vault", OrangeItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.ORANGE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(OrangeItemVaultCTBehaviour::new))
        .item(OrangeItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<PinkItemVaultBlock> PINK_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("pink_item_vault", PinkItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.PINK)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(PinkItemVaultCTBehaviour::new))
        .item(PinkItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<PurpleItemVaultBlock> PURPLE_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("purple_item_vault", PurpleItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.PURPLE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(PurpleItemVaultCTBehaviour::new))
        .item(PurpleItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<RedItemVaultBlock> RED_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("red_item_vault", RedItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.RED)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(RedItemVaultCTBehaviour::new))
        .item(RedItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<WhiteItemVaultBlock> WHITE_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("white_item_vault", WhiteItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.WHITE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(WhiteItemVaultCTBehaviour::new))
        .item(WhiteItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<YellowItemVaultBlock> YELLOW_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("yellow_item_vault", YellowItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.YELLOW)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(YellowItemVaultCTBehaviour::new))
        .item(YellowItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<VerticalItemVaultBlock> VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("vertical_item_vault", VerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(MapColor.TERRACOTTA_BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(VerticalItemVaultCTBehaviour::new))
        .item(VerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BlackVerticalItemVaultBlock> BLACK_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("black_vertical_item_vault", BlackVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BLACK)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(BlackVerticalItemVaultCTBehaviour::new))
        .item(BlackVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BlueVerticalItemVaultBlock> BLUE_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("blue_vertical_item_vault", BlueVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(BlueVerticalItemVaultCTBehaviour::new))
        .item(BlueVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BrownVerticalItemVaultBlock> BROWN_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("brown_vertical_item_vault", BrownVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BROWN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(BrownVerticalItemVaultCTBehaviour::new))
        .item(BrownVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<CyanVerticalItemVaultBlock> CYAN_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("cyan_vertical_item_vault", CyanVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.CYAN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(CyanVerticalItemVaultCTBehaviour::new))
        .item(CyanVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<GrayVerticalItemVaultBlock> GRAY_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("gray_vertical_item_vault", GrayVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.GRAY)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(GrayVerticalItemVaultCTBehaviour::new))
        .item(GrayVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<GreenVerticalItemVaultBlock> GREEN_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("green_vertical_item_vault", GreenVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.GREEN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(GreenVerticalItemVaultCTBehaviour::new))
        .item(GreenVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LightBlueVerticalItemVaultBlock> LIGHT_BLUE_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("light_blue_vertical_item_vault", LightBlueVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIGHT_BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(LightBlueVerticalItemVaultCTBehaviour::new))
        .item(LightBlueVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LightGrayVerticalItemVaultBlock> LIGHT_GRAY_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("light_gray_vertical_item_vault", LightGrayVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIGHT_GRAY)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(LightGrayVerticalItemVaultCTBehaviour::new))
        .item(LightGrayVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LimeVerticalItemVaultBlock> LIME_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("lime_vertical_item_vault", LimeVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIME)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(LimeVerticalItemVaultCTBehaviour::new))
        .item(LimeVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<MagentaVerticalItemVaultBlock> MAGENTA_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("magenta_vertical_item_vault", MagentaVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.MAGENTA)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(MagentaVerticalItemVaultCTBehaviour::new))
        .item(MagentaVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<OrangeVerticalItemVaultBlock> ORANGE_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("orange_vertical_item_vault", OrangeVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.ORANGE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(OrangeVerticalItemVaultCTBehaviour::new))
        .item(OrangeVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<PinkVerticalItemVaultBlock> PINK_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("pink_vertical_item_vault", PinkVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.PINK)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(PinkVerticalItemVaultCTBehaviour::new))
        .item(PinkVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<PurpleVerticalItemVaultBlock> PURPLE_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("purple_vertical_item_vault", PurpleVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.PURPLE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(PurpleVerticalItemVaultCTBehaviour::new))
        .item(PurpleVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<RedVerticalItemVaultBlock> RED_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("red_vertical_item_vault", RedVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.RED)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(RedVerticalItemVaultCTBehaviour::new))
        .item(RedVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<WhiteVerticalItemVaultBlock> WHITE_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("white_vertical_item_vault", WhiteVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.WHITE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(WhiteVerticalItemVaultCTBehaviour::new))
        .item(WhiteVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<YellowVerticalItemVaultBlock> YELLOW_VERTICAL_ITEM_VAULT = CreateVibrantVaults.REGISTRATE.block("yellow_vertical_item_vault", YellowVerticalItemVaultBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.YELLOW)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(YellowVerticalItemVaultCTBehaviour::new))
        .item(YellowVerticalItemVaultItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<ShippingContainerBlock> SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("shipping_container", ShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(MapColor.TERRACOTTA_BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(ShippingContainerCTBehaviour::new))
        .item(ShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BlackShippingContainerBlock> BLACK_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("black_shipping_container", BlackShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BLACK)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(BlackShippingContainerCTBehaviour::new))
        .item(BlackShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BlueShippingContainerBlock> BLUE_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("blue_shipping_container", BlueShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(BlueShippingContainerCTBehaviour::new))
        .item(BlueShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BrownShippingContainerBlock> BROWN_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("brown_shipping_container", BrownShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BROWN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(BrownShippingContainerCTBehaviour::new))
        .item(BrownShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<CyanShippingContainerBlock> CYAN_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("cyan_shipping_container", CyanShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.CYAN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(CyanShippingContainerCTBehaviour::new))
        .item(CyanShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<GrayShippingContainerBlock> GRAY_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("gray_shipping_container", GrayShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.GRAY)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(GrayShippingContainerCTBehaviour::new))
        .item(GrayShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<GreenShippingContainerBlock> GREEN_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("green_shipping_container", GreenShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.GREEN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(GreenShippingContainerCTBehaviour::new))
        .item(GreenShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LightBlueShippingContainerBlock> LIGHT_BLUE_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("light_blue_shipping_container", LightBlueShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIGHT_BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(LightBlueShippingContainerCTBehaviour::new))
        .item(LightBlueShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LightGrayShippingContainerBlock> LIGHT_GRAY_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("light_gray_shipping_container", LightGrayShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIGHT_GRAY)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(LightGrayShippingContainerCTBehaviour::new))
        .item(LightGrayShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LimeShippingContainerBlock> LIME_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("lime_shipping_container", LimeShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIME)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(LimeShippingContainerCTBehaviour::new))
        .item(LimeShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<MagentaShippingContainerBlock> MAGENTA_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("magenta_shipping_container", MagentaShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.MAGENTA)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(MagentaShippingContainerCTBehaviour::new))
        .item(MagentaShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<OrangeShippingContainerBlock> ORANGE_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("orange_shipping_container", OrangeShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.ORANGE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(OrangeShippingContainerCTBehaviour::new))
        .item(OrangeShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<PinkShippingContainerBlock> PINK_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("pink_shipping_container", PinkShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.PINK)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(PinkShippingContainerCTBehaviour::new))
        .item(PinkShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<PurpleShippingContainerBlock> PURPLE_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("purple_shipping_container", PurpleShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.PURPLE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(PurpleShippingContainerCTBehaviour::new))
        .item(PurpleShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<RedShippingContainerBlock> RED_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("red_shipping_container", RedShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.RED)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(RedShippingContainerCTBehaviour::new))
        .item(RedShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<WhiteShippingContainerBlock> WHITE_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("white_shipping_container", WhiteShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.WHITE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(WhiteShippingContainerCTBehaviour::new))
        .item(WhiteShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<YellowShippingContainerBlock> YELLOW_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("yellow_shipping_container", YellowShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.YELLOW)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(YellowShippingContainerCTBehaviour::new))
        .item(YellowShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<VerticalShippingContainerBlock> VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("vertical_shipping_container", VerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(MapColor.TERRACOTTA_BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(VerticalShippingContainerCTBehaviour::new))
        .item(VerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BlackVerticalShippingContainerBlock> BLACK_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("black_vertical_shipping_container", BlackVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BLACK)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(BlackVerticalShippingContainerCTBehaviour::new))
        .item(BlackVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BlueVerticalShippingContainerBlock> BLUE_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("blue_vertical_shipping_container", BlueVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(BlueVerticalShippingContainerCTBehaviour::new))
        .item(BlueVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BrownVerticalShippingContainerBlock> BROWN_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("brown_vertical_shipping_container", BrownVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BROWN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(BrownVerticalShippingContainerCTBehaviour::new))
        .item(BrownVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<CyanVerticalShippingContainerBlock> CYAN_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("cyan_vertical_shipping_container", CyanVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.CYAN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(CyanVerticalShippingContainerCTBehaviour::new))
        .item(CyanVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<GrayVerticalShippingContainerBlock> GRAY_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("gray_vertical_shipping_container", GrayVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.GRAY)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(GrayVerticalShippingContainerCTBehaviour::new))
        .item(GrayVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<GreenVerticalShippingContainerBlock> GREEN_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("green_vertical_shipping_container", GreenVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.GREEN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(GreenVerticalShippingContainerCTBehaviour::new))
        .item(GreenVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LightBlueVerticalShippingContainerBlock> LIGHT_BLUE_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("light_blue_vertical_shipping_container", LightBlueVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIGHT_BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(LightBlueVerticalShippingContainerCTBehaviour::new))
        .item(LightBlueVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LightGrayVerticalShippingContainerBlock> LIGHT_GRAY_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("light_gray_vertical_shipping_container", LightGrayVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIGHT_GRAY)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(LightGrayVerticalShippingContainerCTBehaviour::new))
        .item(LightGrayVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LimeVerticalShippingContainerBlock> LIME_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("lime_vertical_shipping_container", LimeVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIME)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(LimeVerticalShippingContainerCTBehaviour::new))
        .item(LimeVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<MagentaVerticalShippingContainerBlock> MAGENTA_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("magenta_vertical_shipping_container", MagentaVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.MAGENTA)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(MagentaVerticalShippingContainerCTBehaviour::new))
        .item(MagentaVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<OrangeVerticalShippingContainerBlock> ORANGE_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("orange_vertical_shipping_container", OrangeVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.ORANGE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(OrangeVerticalShippingContainerCTBehaviour::new))
        .item(OrangeVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<PinkVerticalShippingContainerBlock> PINK_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("pink_vertical_shipping_container", PinkVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.PINK)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(PinkVerticalShippingContainerCTBehaviour::new))
        .item(PinkVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<PurpleVerticalShippingContainerBlock> PURPLE_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("purple_vertical_shipping_container", PurpleVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.PURPLE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(PurpleVerticalShippingContainerCTBehaviour::new))
        .item(PurpleVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<RedVerticalShippingContainerBlock> RED_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("red_vertical_shipping_container", RedVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.RED)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(RedVerticalShippingContainerCTBehaviour::new))
        .item(RedVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<WhiteVerticalShippingContainerBlock> WHITE_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("white_vertical_shipping_container", WhiteVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.WHITE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(WhiteVerticalShippingContainerCTBehaviour::new))
        .item(WhiteVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<YellowVerticalShippingContainerBlock> YELLOW_VERTICAL_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("yellow_vertical_shipping_container", YellowVerticalShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.YELLOW)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(YellowVerticalShippingContainerCTBehaviour::new))
        .item(YellowVerticalShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BasicShippingContainerBlock> BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("basic_shipping_container", BasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(MapColor.TERRACOTTA_BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(BasicShippingContainerCTBehaviour::new))
        .item(BasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BlackBasicShippingContainerBlock> BLACK_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("black_basic_shipping_container", BlackBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BLACK)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(BlackBasicShippingContainerCTBehaviour::new))
        .item(BlackBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BlueBasicShippingContainerBlock> BLUE_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("blue_basic_shipping_container", BlueBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(BlueBasicShippingContainerCTBehaviour::new))
        .item(BlueBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BrownBasicShippingContainerBlock> BROWN_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("brown_basic_shipping_container", BrownBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BROWN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(BrownBasicShippingContainerCTBehaviour::new))
        .item(BrownBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<CyanBasicShippingContainerBlock> CYAN_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("cyan_basic_shipping_container", CyanBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.CYAN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(CyanBasicShippingContainerCTBehaviour::new))
        .item(CyanBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<GrayBasicShippingContainerBlock> GRAY_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("gray_basic_shipping_container", GrayBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.GRAY)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(GrayBasicShippingContainerCTBehaviour::new))
        .item(GrayBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<GreenBasicShippingContainerBlock> GREEN_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("green_basic_shipping_container", GreenBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.GREEN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(GreenBasicShippingContainerCTBehaviour::new))
        .item(GreenBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LightBlueBasicShippingContainerBlock> LIGHT_BLUE_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("light_blue_basic_shipping_container", LightBlueBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIGHT_BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(LightBlueBasicShippingContainerCTBehaviour::new))
        .item(LightBlueBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LightGrayBasicShippingContainerBlock> LIGHT_GRAY_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("light_gray_basic_shipping_container", LightGrayBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIGHT_GRAY)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(LightGrayBasicShippingContainerCTBehaviour::new))
        .item(LightGrayBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LimeBasicShippingContainerBlock> LIME_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("lime_basic_shipping_container", LimeBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIME)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(LimeBasicShippingContainerCTBehaviour::new))
        .item(LimeBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<MagentaBasicShippingContainerBlock> MAGENTA_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("magenta_basic_shipping_container", MagentaBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.MAGENTA)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(MagentaBasicShippingContainerCTBehaviour::new))
        .item(MagentaBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<OrangeBasicShippingContainerBlock> ORANGE_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("orange_basic_shipping_container", OrangeBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.ORANGE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(OrangeBasicShippingContainerCTBehaviour::new))
        .item(OrangeBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<PinkBasicShippingContainerBlock> PINK_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("pink_basic_shipping_container", PinkBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.PINK)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(PinkBasicShippingContainerCTBehaviour::new))
        .item(PinkBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<PurpleBasicShippingContainerBlock> PURPLE_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("purple_basic_shipping_container", PurpleBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.PURPLE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(PurpleBasicShippingContainerCTBehaviour::new))
        .item(PurpleBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<RedBasicShippingContainerBlock> RED_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("red_basic_shipping_container", RedBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.RED)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(RedBasicShippingContainerCTBehaviour::new))
        .item(RedBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<WhiteBasicShippingContainerBlock> WHITE_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("white_basic_shipping_container", WhiteBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.WHITE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(WhiteBasicShippingContainerCTBehaviour::new))
        .item(WhiteBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<YellowBasicShippingContainerBlock> YELLOW_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("yellow_basic_shipping_container", YellowBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.YELLOW)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .rotationY(s.getValue(AbstractItemVaultBlock.HORIZONTAL_AXIS) == Direction.Axis.X ? 90 : 0)
                .build()))
        .onRegister(connectedTextures(YellowBasicShippingContainerCTBehaviour::new))
        .item(YellowBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<VerticalBasicShippingContainerBlock> VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("vertical_basic_shipping_container", VerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(MapColor.TERRACOTTA_BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(VerticalBasicShippingContainerCTBehaviour::new))
        .item(VerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BlackVerticalBasicShippingContainerBlock> BLACK_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("black_vertical_basic_shipping_container", BlackVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BLACK)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(BlackVerticalBasicShippingContainerCTBehaviour::new))
        .item(BlackVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BlueVerticalBasicShippingContainerBlock> BLUE_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("blue_vertical_basic_shipping_container", BlueVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(BlueVerticalBasicShippingContainerCTBehaviour::new))
        .item(BlueVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<BrownVerticalBasicShippingContainerBlock> BROWN_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("brown_vertical_basic_shipping_container", BrownVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.BROWN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(BrownVerticalBasicShippingContainerCTBehaviour::new))
        .item(BrownVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<CyanVerticalBasicShippingContainerBlock> CYAN_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("cyan_vertical_basic_shipping_container", CyanVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.CYAN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(CyanVerticalBasicShippingContainerCTBehaviour::new))
        .item(CyanVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<GrayVerticalBasicShippingContainerBlock> GRAY_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("gray_vertical_basic_shipping_container", GrayVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.GRAY)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(GrayVerticalBasicShippingContainerCTBehaviour::new))
        .item(GrayVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<GreenVerticalBasicShippingContainerBlock> GREEN_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("green_vertical_basic_shipping_container", GreenVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.GREEN)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(GreenVerticalBasicShippingContainerCTBehaviour::new))
        .item(GreenVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LightBlueVerticalBasicShippingContainerBlock> LIGHT_BLUE_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("light_blue_vertical_basic_shipping_container", LightBlueVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIGHT_BLUE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(LightBlueVerticalBasicShippingContainerCTBehaviour::new))
        .item(LightBlueVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LightGrayVerticalBasicShippingContainerBlock> LIGHT_GRAY_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("light_gray_vertical_basic_shipping_container", LightGrayVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIGHT_GRAY)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(LightGrayVerticalBasicShippingContainerCTBehaviour::new))
        .item(LightGrayVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<LimeVerticalBasicShippingContainerBlock> LIME_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("lime_vertical_basic_shipping_container", LimeVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.LIME)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(LimeVerticalBasicShippingContainerCTBehaviour::new))
        .item(LimeVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<MagentaVerticalBasicShippingContainerBlock> MAGENTA_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("magenta_vertical_basic_shipping_container", MagentaVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.MAGENTA)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(MagentaVerticalBasicShippingContainerCTBehaviour::new))
        .item(MagentaVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<OrangeVerticalBasicShippingContainerBlock> ORANGE_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("orange_vertical_basic_shipping_container", OrangeVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.ORANGE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(OrangeVerticalBasicShippingContainerCTBehaviour::new))
        .item(OrangeVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<PinkVerticalBasicShippingContainerBlock> PINK_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("pink_vertical_basic_shipping_container", PinkVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.PINK)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(PinkVerticalBasicShippingContainerCTBehaviour::new))
        .item(PinkVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<PurpleVerticalBasicShippingContainerBlock> PURPLE_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("purple_vertical_basic_shipping_container", PurpleVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.PURPLE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(PurpleVerticalBasicShippingContainerCTBehaviour::new))
        .item(PurpleVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<RedVerticalBasicShippingContainerBlock> RED_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("red_vertical_basic_shipping_container", RedVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.RED)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(RedVerticalBasicShippingContainerCTBehaviour::new))
        .item(RedVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<WhiteVerticalBasicShippingContainerBlock> WHITE_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("white_vertical_basic_shipping_container", WhiteVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.WHITE)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(WhiteVerticalBasicShippingContainerCTBehaviour::new))
        .item(WhiteVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static final BlockEntry<YellowVerticalBasicShippingContainerBlock> YELLOW_VERTICAL_BASIC_SHIPPING_CONTAINER = CreateVibrantVaults.REGISTRATE.block("yellow_vertical_basic_shipping_container", YellowVerticalBasicShippingContainerBlock::new)
        .initialProperties(SharedProperties::softMetal)
        .properties(p -> p.mapColor(DyeColor.YELLOW)
            .sound(SoundType.NETHERITE_BLOCK)
            .explosionResistance(1200))
        .transform(pickaxeOnly())
        .blockstate((c, p) -> p.getVariantBuilder(c.get())
            .forAllStates(s -> ConfiguredModel.builder()
                .modelFile(AssetLookup.standardModel(c, p))
                .build()))
        .onRegister(connectedTextures(YellowVerticalBasicShippingContainerCTBehaviour::new))
        .item(YellowVerticalBasicShippingContainerItem::new)
        .tab(AllCreativeModeTabs.BASE_CREATIVE_TAB.key())
        .build()
        .register();

    public static void register() {}
}
